basePath: /api/v1
definitions:
  domain.Address:
    properties:
      city:
        type: string
      country:
        type: string
      id:
        type: integer
      is_default:
        type: boolean
      postal_code:
        type: string
      state:
        type: string
      street:
        type: string
      user_id:
        type: integer
    required:
    - city
    - country
    - postal_code
    - state
    - street
    type: object
  domain.CreatAddressRequest:
    properties:
      city:
        type: string
      country:
        type: string
      is_default:
        type: boolean
      postal_code:
        type: string
      state:
        type: string
      street:
        type: string
    required:
    - city
    - country
    - postal_code
    - state
    - street
    type: object
  domain.CreateOrderItem:
    properties:
      product_id:
        type: integer
      quantity:
        type: integer
    required:
    - product_id
    - quantity
    type: object
  domain.CreateOrderRequest:
    properties:
      items:
        items:
          $ref: '#/definitions/domain.CreateOrderItem'
        type: array
      payment_method:
        type: string
      shipping_address:
        $ref: '#/definitions/domain.CreatAddressRequest'
    required:
    - items
    - payment_method
    - shipping_address
    type: object
  domain.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  domain.LoginResponse:
    properties:
      token:
        type: string
      user:
        $ref: '#/definitions/domain.User'
    type: object
  domain.Order:
    properties:
      id:
        type: integer
      items:
        items:
          $ref: '#/definitions/domain.OrderItem'
        type: array
      payment_status:
        allOf:
        - $ref: '#/definitions/domain.PaymentStatus'
        description: ShippingAddr   Address       `json:"address,omitempty" gorm:"foreignKey:ShippingAddrID"`
      shipping_address_id:
        type: integer
      status:
        $ref: '#/definitions/domain.OrderStatus'
      total_amount:
        type: number
      user_id:
        type: integer
    type: object
  domain.OrderItem:
    properties:
      id:
        type: integer
      price:
        type: number
      product:
        $ref: '#/definitions/domain.Product'
      quantity:
        type: integer
    type: object
  domain.OrderStatus:
    enum:
    - pending
    - confirmed
    - shipped
    - delivered
    - cancelled
    type: string
    x-enum-varnames:
    - StatusPending
    - StatusConfirmed
    - StatusShipped
    - StatusDelivered
    - StatusCancelled
  domain.PaymentStatus:
    enum:
    - pending
    - completed
    - failed
    - refunded
    type: string
    x-enum-varnames:
    - PaymentPending
    - PaymentCompleted
    - PaymentFailed
    - PaymentRefunded
  domain.Product:
    properties:
      category:
        type: string
      description:
        type: string
      id:
        type: integer
      image_url:
        type: string
      name:
        type: string
      price:
        type: number
      sku:
        type: string
      stock:
        type: integer
    type: object
  domain.RegisterRequest:
    properties:
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        minLength: 6
        type: string
    required:
    - email
    - first_name
    - last_name
    - password
    type: object
  domain.UpdateOrderStatusRequest:
    properties:
      status:
        $ref: '#/definitions/domain.OrderStatus'
    type: object
  domain.User:
    properties:
      addresses:
        items:
          $ref: '#/definitions/domain.Address'
        type: array
      email:
        type: string
      first_name:
        type: string
      id:
        type: integer
      last_name:
        type: string
      orders:
        items:
          $ref: '#/definitions/domain.Order'
        type: array
      role:
        $ref: '#/definitions/domain.UserRole'
    type: object
  domain.UserRole:
    enum:
    - user
    - admin
    type: string
    x-enum-varnames:
    - RoleUser
    - RoleAdmin
  response.ErrorResponse:
    properties:
      error:
        type: string
      message:
        type: string
      status:
        type: integer
    type: object
  response.Response:
    properties:
      data: {}
      error: {}
      message:
        type: string
      status:
        type: integer
    type: object
host: localhost:8080
info:
  contact: {}
  description: A RESTful API for an e-commerce application
  title: E-commerce API
  version: "1.0"
paths:
  /api/v1/orders:
    get:
      consumes:
      - application/json
      description: Get all orders for the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.Order'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List all orders for a user
      tags:
      - orders
    post:
      consumes:
      - application/json
      description: Create a new order for authenticated user
      parameters:
      - description: Order details
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/domain.CreateOrderRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.Order'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Place an order for one or more products
      tags:
      - orders
  /api/v1/orders/:id:
    delete:
      consumes:
      - application/json
      description: Cancel an order if it is still pending
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Cancel an order
      tags:
      - orders
  /api/v1/orders/:id/status:
    put:
      consumes:
      - application/json
      description: Update the status of an order (admin only)
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: integer
      - description: New status
        in: body
        name: status
        required: true
        schema:
          $ref: '#/definitions/domain.UpdateOrderStatusRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Order'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update order status
      tags:
      - orders
  /api/v1/products:
    get:
      consumes:
      - application/json
      description: Lists products with optional filtering
      parameters:
      - description: Product name
        in: query
        name: name
        type: string
      - description: Minimum price
        in: query
        name: min_price
        type: number
      - description: Maximum price
        in: query
        name: max_price
        type: number
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.Product'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: List products
      tags:
      - products
    post:
      consumes:
      - multipart/form-data
      description: Create a new product using form data
      parameters:
      - description: Product name
        in: formData
        name: name
        required: true
        type: string
      - description: Product price
        in: formData
        name: price
        required: true
        type: number
      - description: Product stock
        in: formData
        name: stock
        required: true
        type: integer
      - description: Product SKU
        in: formData
        name: sku
        required: true
        type: string
      - description: Product category
        in: formData
        name: category
        required: true
        type: string
      - description: Product image
        in: formData
        name: image
        required: true
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.Product'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: Create a new product
      tags:
      - products
  /api/v1/products/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a product by ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
      summary: Delete a product
      tags:
      - products
    get:
      consumes:
      - application/json
      description: Returns the product that matches the given ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Product'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get a product by ID
      tags:
      - products
    put:
      consumes:
      - multipart/form-data
      description: Updates a product by ID using form data
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      - description: Product name
        in: formData
        name: name
        type: string
      - description: Product price
        in: formData
        name: price
        type: number
      - description: Product stock
        in: formData
        name: stock
        type: integer
      - description: Product SKU
        in: formData
        name: sku
        type: string
      - description: Product category
        in: formData
        name: category
        type: string
      - description: Product image
        in: formData
        name: image
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Product'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
      summary: Update a product
      tags:
      - products
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return JWT token
      parameters:
      - description: Login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/domain.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Login user
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user with email and password
      parameters:
      - description: User registration details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/domain.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/response.Response'
      summary: Register new user
      tags:
      - auth
  /auth/register-admin:
    post:
      consumes:
      - application/json
      description: Register a new admin with email and password
      parameters:
      - description: Admin registration details
        in: body
        name: admin
        required: true
        schema:
          $ref: '#/definitions/domain.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/response.Response'
      summary: Register new admin
      tags:
      - auth
  /users/me:
    get:
      consumes:
      - application/json
      description: Get authenticated user profile
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.User'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user profile
      tags:
      - users
swagger: "2.0"
